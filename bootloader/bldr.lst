JWasm v2.11, Oct 20 2013
bldr.asm
                                .model tiny
                                .386
                                .code
                                org 7c00h						; code here starts at offset 7c00h

00007C00                        main proc
00007C00  8CC8                  	mov ax, cs					; Set CS = SS = DS
00007C02  8ED0                  	mov ss, ax
00007C04  8ED8                  	mov ds, ax
                                	
00007C06  BC0000                	mov sp, 0	;I BELIEVE THIS IS CAUSING AN ERROR

00007C09  BA357C                	mov dx, offset mystring		; Print the "Booting..." message
00007C0C  E84B00                	call print_line
                                	
00007C0F  B102                  	mov cl, 2					; Set the Current sector = 2
00007C11  B028                  	mov al, 40					; Set the number of sectors to read = 40
                                	
00007C13  BA0008                	mov dx, 0800h				; Move into ES register segment 0000h
00007C16  8EC2                  	mov es, dx
00007C18  BB0000                	mov bx, 0000h				; Move into BX register offset 0800h
                                	
00007C1B  B500                  	mov ch, 0					; Set the Cylinder = 0
00007C1D  B600                  	mov dh, 0					; Set Head = 0
00007C1F  B200                  	mov dl, 0					; Set Drive = 0
00007C21  B402                  	mov ah, 02h					; Call interrupt 13h to read from disk
                                	
00007C23  CD13                  	int 13h						; Read disk
                                	
00007C25  7306                  	jnc happy					; if CF flag is set, print error
00007C27  BA427C                	mov dx, offset errmsg
00007C2A  E82D00                	call print_line
00007C2D                        happy:
                                	
                                	
                                	
00007C2D  680008                	pushw 0800h					; Alice in Wonderland jump to whatever is in address 0000:0800h
00007C30  6A00                  	pushw 0000h
00007C32  CB                    	retf
                                	
00007C33  EB47                  jmp Past_it_all

00007C35                        main endp



00007C35  426F6F74696E672E2E    mystring byte "Booting...", 0dh, 0ah, 0
00007C42  596F75722043617272    errmsg byte "Your Carry Flag is set!", 0

                                ; Function: Prints the ASCII string of a byte array, plus a newline (\r\n), to the screen in green via BIOS
                                ; Receives: DX
                                ; Requires: Nothing
                                ;  Returns: Nothing
                                ; Clobbers: Nothing
00007C5A                        print_line proc
00007C5A  60                    	pusha
00007C5B  BE0000                	mov si, 0
00007C5E  8BDA                  	mov bx, dx

00007C60                        	printloop:
00007C60  8A00                  		mov al, [bx + si] 		; put the next piece of the array into AL
00007C62  3C00                  		cmp al, 0
00007C64  740B                  		jz endprint
00007C66  B40E                  		mov ah, 0Eh   			; 0Eh in BIOS means print character 
00007C68  53                    		push bx
00007C69  B302                  		mov bl, 0010b 			; Set foreground color to green
00007C6B  CD10                  		int 10h		  			; BIOS interrupt
00007C6D  5B                    		pop bx
00007C6E  46                    		inc si
00007C6F  EBEF                  		jmp printloop
00007C71                        	endprint:
00007C71  B80D0E                		mov  ax, 0e0dh
00007C74  CD10                  		int  10h
00007C76  B00A                  		mov  al, 0ah
00007C78  CD10                  		int  10h
00007C7A  61                    		popa
00007C7B                        		ret
00007C7C                        print_line endp

00007C7C                        Past_it_all:
                                	
                                org main+510					; Move the signature 0AA55h into the last 2 bytes of the first sector
00007DFE  55AA                  	byte 055h, 0aah
                                	
                                end main


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .        GROUP
_TEXT  . . . . . . . . . . . . .        16 Bit   7E00     Word    Public  'CODE'
_DATA  . . . . . . . . . . . . .        16 Bit   0000     Word    Public  'DATA'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

main . . . . . . . . . . . . . .        P Near   7C00     _TEXT    0035 Public   
  happy  . . . . . . . . . . . .        L Near   7C2D     _TEXT
print_line . . . . . . . . . . .        P Near   7C5A     _TEXT    0022 Public   
  endprint . . . . . . . . . . .        L Near   7C71     _TEXT
  printloop  . . . . . . . . . .        L Near   7C60     _TEXT


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             0h 
@Model . . . . . . . . . . . . .        Number             1h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   DGROUP
@stack . . . . . . . . . . . . .        Text   DGROUP
Past_it_all  . . . . . . . . . .        L Near          7C7Ch _TEXT 
errmsg . . . . . . . . . . . . .        Byte[24]        7C42h _TEXT 
mystring . . . . . . . . . . . .        Byte[13]        7C35h _TEXT 

bldr.asm: 85 lines, 2 passes, 0 ms, 0 warnings, 0 errors
